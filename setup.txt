##############################
# Install pytorch on pc (with spacemacs)
##############################
$ sudo apt install python3.8-venv
$ cd ~/virtualenv_environments/
$ python3 -m venv py38_yolov5_pytorch
$ sourch py38_yolov5_pytorch/bin/activate

# debug in spacemacs
pip3 install "ptvsd>=4.2"

# install pytorch (from https://pytorch.org/get-started/locally/ stable(1.10.1)->linux->pip->python->cpu)
(py38_yolov5_pytorch)$ pip3 install torch==1.10.1+cpu torchvision==0.11.2+cpu torchaudio==0.10.1+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html
# install dependencies (from https://pytorch.org/hub/ultralytics_yolov5/)
(py38_yolov5_pytorch)$ pip install -qr https://raw.githubusercontent.com/ultralytics/yolov5/master/requirements.txt

(py38_yolov5_pytorch)$ pip3 install iPytho

for showing conv results:
$ pip3 install torchvision
$ pip3 install imageio
#####################################
# Install pytorch in raspberry pi
# (1) (from https://www.spinellis.gr/blog/20200317/index.html)
# (2) (and https://github.com/NikhilKanda/Pytorch-on-Raspberry-PI-3B/blob/master/How%20to%20install%20PyTorch%20on%20Raspberry%20Pi%203B.md)
#####################################
(1) DID NOT WORK for me, makefile error 2
(2) WORKING

(2) To install pytorch on rpi, you have to compile it from source, there is no pre-compiled binary for ARMv7/ARMhf

$ cd ~/virtualenv_environments/
$ python3 -m venv py38_yolov5_pytorch
$ sourch py38_yolov5_pytorch/bin/activate

# debug in spacemac
pip3 install "ptvsd>=4.2"

(1) (2) # 1. install dependencies.
(1)
$ sudo apt-get install libopenblas-dev cython libblas-dev m4 cmake python3-dev python3-yaml python3-setuptools

(2)
$ sudo apt-get install libopenblas-dev cython libblas-dev m4 libatlas-base-dev
(libatlas-dev has no installation candidate, libatlas-base-dev replace it)

(1)(2) # 2. clone repository
(1)
# (--depth=1 to save the bandwidth of copying unneeded past history)
$ git clone --depth=1 --recursive https://github.com/pytorch/pytorch
$ cd pytorch

(2)
$ mkdir pytorch_rpi
$ cd pytorch_rpi
$ git clone --recursive https://github.com/pytorch/pytorch

(1)(2)(united)
$ git clone --depth=1 --recursive https://github.com/pytorch/pytorch

(1) # 3. bug fix
# (in protobuf that prevents the compilation)
# (update to current version)
$ git submodule update --remote third_party/protobuf

(1)(2) # 4. configure swap space (if you have 1MB of RAM in your raspberry pi (3B+), mine have 100M)
(1)
# (to see how much RAM you have:
#     (under SIZE entry) (need at least 2GB, other wise configure)
$ /sbin/swapon
#     or (under Swp)
$ htop
# )
# (to list disks:
$ df -h
# )
# # Create a 2GB swap file
$ sudo dd if=/dev/zero of=/swap0 bs=1M count=2048
# # Format it for swapping
$ sudo mkswap /swap0
# # Configure the system to use it for swapping
$ sudo sh -c 'echo /swap0 swap swap' >>/etc/fstab
# (permission denied, I used:
#             1. $ sudo nano /etc/fstab
#             2. (add as the last line) /swap0 swap swap
#             3. C-o (save) C-x (exit)
# )
# # Make this take effect now
$ sudo swapon -a

(2)
# There has to be at least 2GB of swap memory for 16GB SD card (and 4GB for 32GB).
# chack swap space with:
$ htop
# There are 2 ways to do this:

# 1. Through /etc/fstab
$ sudo dd if=/dev/zero of=/swap1 bs=1M count=2048 (for me count=4096, due to 32GB SD card)
# make this file into a swap-compatible file
$ sudo mkswap /swap1
# disable the old swap space and enable the new one
$ sudo nano /etc/fstab
# change the last line from /swap0 swap swap to: (write as last line)
/swap1 swap swap
C-o (save) Enter (confirm) C-x (exit nano)
# manually turn off and empty the old swap space and enable the new one (and not wait for reboot)
$ sudo swapoff /swap0
$ sudo swapon /swap1

# 2. Throught dphys-swapfile
$ vi /etc/dphys-swapfile
# change CONF_SWAPSIZE
CONF_SWAPSIZE = 2048
$ sudo /etc/init.d/dphys-swapfile stop
$ sudo /etc/init.d/dphys-swapfile start

(1)(2) if you did (1) and (2)fstab, then undo (1) with:
$ rm /swap0

(1) # 5. configure the build process
(2) # 4. set compiler flags
(1)
# (the environment variables derived from setup.py - do it yourself to verify they still current)
# # save variables in script (to feed to source) (e.g. source my-variables.sh in every loging to pi) (compile pytorch)
# # test the results on the pi, with the results tested with the more powerful platform (on which it was tested, e.g. pc)
# # MAX_JOBS is the most important variable (default run (num_cpu - 1) jobs in parallel, num_cpu = number of cores)
# # (in 1MB RAM pi, the RAM run out, and swap is used)
# # (compilation processes compete for the swap space, it increases tremendously the disk I/O, and slow compilation process almost to a halt)
# # (with 2 (rather than 3) parallel jobs, a few tens of MB RAM always remained free)

# Limit the number of parallel jobs in a 1MB Pi to prevent thrashing
$ export MAX_JOBS=2

# Disable features that don't make sense on a Pi
$ export USE_CUDA=0
$ export USE_CUDNN=0
$ export USE_MKLDNN=0
$ export USE_NNPACK=0
$ export USE_QNNPACK=0
$ export USE_DISTRIBUTED=0

# Disable testing, which takes ages
$ export BUILD_TEST=0

(2)
# CUDA is required for GPU access, since RPI doesn't have a GPU, we set No cuda to 1
$ export NO_CUDA=1
# distributed process parallelizes the computations across processes and clusters of machines
$ export NO_DISTRIBUTED=1
# MKLDNN expedites the computations, but NO_MKLDNN has to be set for error free compilation (don't know why)
$ export NO_MKLDNN=1

(1)(2) # 6. start build process (may take more than 12 hours)
(1)
$ python3 setup.py build
# (run the command with 'nohup', will run in background even if connection to pi is interrupted,
$ tail -f nohup.out (to see the compilatin results)

(2)
$ cd pytorch_rpi/pytorch
$ python3 setup.py build

(1) # 7. install the compiled files
(2) # 6. test
(1)
$ sudo -E python3 setup.py install

(2)
# test through interpreter
$ python3
>>> import pytorch
# line to tutorial on how to use pytorch (Loading a TorchScript Model in C++)
https://pytorch.org/tutorials/advanced/cpp_export.html